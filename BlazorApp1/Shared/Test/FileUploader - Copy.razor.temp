@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@* <div @ondrop="OnDrop"
     @ondragover="(e => e.PreventDefault())"
     @onclick="OpenFileDialog"
     class="upload-area"
     style="border: 2px dashed gray; padding: 30px; text-align: center;">
    <p>Drag & drop files here or click to select</p>
</div>

<InputFile @ref="fileInput" OnChange="UploadFiles" multiple style="display: none;" />
 *@
<div id="dropZone" style="border: 2px dashed gray; padding: 30px;"
     @onclick="OpenFileDialog">
    Drag & drop files here or click to select
</div>

<InputFile @ref="fileInput" OnChange="UploadFiles" multiple style="display:none" />
@if (uploadedFiles.Count > 0)
{
    <h3>Uploaded Files</h3>
    <ul>
        @foreach (var file in uploadedFiles)
        {
            <li>@file.Name (@(file.Size / 1024) KB)</li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> uploadedFiles = new();

    // private void HandleSelectedFiles(InputFileChangeEventArgs e)
    // {
    //     uploadedFiles = e.GetMultipleFiles().ToList();
    // }
    private InputFile fileInput;

    private void OpenFileDialog()
    {
        fileInput.Element.ClickAsync();
    }

    private async void OnDrop(DragEventArgs e)
    {
            uploadedFiles.Clear();
        if (e.DataTransfer?.Files is { Length: > 0 } files)
        {
            if (files.Length > 5)
            {
                uploadResult = "Limit: 5 files max.";
                StateHasChanged();
                return;
            }

            await UploadFiles(files);
        }

    }

    private string uploadResult;
    // private Task OnDrop(DragEventArgs e)
    // {
    //     uploadedFiles.Clear();
    //     return Task.CompletedTask;
    // }
    // private string? uploadResult;

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var r = await Http.GetAsync("https://localhost:7113/api/fileupload");
        if (r.IsSuccessStatusCode)
        {
            var result = await r.Content.ReadAsStringAsync();
            Console.WriteLine(result);
        }
        else
        {
            Console.WriteLine($"Error: {r.StatusCode}");
        }
        var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles())
        {
            var stream = file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
            content.Add(new StreamContent(stream), "files", file.Name);
        }

        var response = await Http.PostAsync("https://localhost:7113/api/fileupload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            uploadResult = $"Success: {result}";
        }
        else
        {
            uploadResult = "Upload failed.";
        }
    }
}

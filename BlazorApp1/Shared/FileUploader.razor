@inject HttpClient Http
@inject IJSRuntime JS
<div id="dropZone" style="
     border: 2px dashed #aaa;
     padding: 30px;
     text-align: center;
     margin-top: 20px;
     background-color: #f9f9f9;
">
    Drop up to 5 files here
</div>

<p id="uploadStatus" style="margin-top: 10px; color: green;"></p>

<div
@ondragover:preventDefault
     class="upload-area"
     style="border: 2px dashed #aaa; padding: 30px; text-align: center;">
    <InputFile OnChange="UploadFiles" multiple />
</div>

<p>@uploadResult</p>

@code {
    private string uploadResult = "";

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        if (files.Count > 5)
        {
            uploadResult = "Please select no more than 5 files.";
            return;
        }

        var content = new MultipartFormDataContent();

        foreach (var file in files)
        {
            var stream = file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
            content.Add(new StreamContent(stream), "files", file.Name);
        }

        var response = await Http.PostAsync("api/fileupload", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            uploadResult = $"Success: {result}";
        }
        else
        {
            uploadResult = "Upload failed.";
        }
    }

    private async Task OnDrop(DragEventArgs e)
    {
        // Letting <InputFile> handle actual file parsing via click/drop
        // If you want to enhance drag-drop to auto-upload, JS interop is needed.
        // But for now, drag-drop works by interacting with <InputFile>
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync(
                "fileDropUploader.initDropZone",
                "dropZone",
                "/api/fileupload",
                "uploadStatus"
            );
        }
    }
}
